# app_full.py
# -*- coding: utf-8 -*-
import os, sqlite3
import secrets
from datetime import datetime
from functools import wraps
from flask import (
    Flask, render_template_string, request, redirect,
    url_for, send_file, flash, session, send_from_directory
)
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
import pandas as pd
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import mm

class NumberedCanvas(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()   # ‚Üê ‡πÉ‡∏ä‡πâ _startPage() ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà showPage() ‡∏Ç‡∏≠‡∏á parent

    def save(self):
        """‡∏ß‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà duplicate"""
        num_pages = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_page_number(num_pages)
            super().showPage()   # ‚Üê ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ showPage ‡πÅ‡∏Ñ‡πà‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡πÜ
        super().save()

    def draw_page_number(self, page_count):
        page = self._pageNumber
        text = f"{page}/{page_count}"
        self.setFont("THSarabunNew", 12)
        self.drawRightString(200*mm, 10*mm, text)




# -------------------- App --------------------
app = Flask(__name__)
# ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡πà‡∏≠ request = 100 MB
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  
# ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå = 20 MB
MAX_FILE_SIZE = 20 * 1024 * 1024  
app.secret_key = "supersecretkey"

with app.app_context():
    init_db()

BASE_DIR    = os.path.join(os.path.expanduser("~"), "Yui_App_DB")
DB_NAME     = os.path.join(BASE_DIR, "records.db")
UPLOAD_DIR  = os.path.join(BASE_DIR, "uploads")
os.makedirs(BASE_DIR, exist_ok=True)
os.makedirs(UPLOAD_DIR, exist_ok=True)

ALLOWED_EXTS = {"png","jpg","jpeg","gif","pdf","doc","docx","xls","xlsx","csv","txt"}

# -------------------- Helpers --------------------
def parse_iso_to_text(iso: str) -> str:
    return datetime.strptime(iso, "%Y-%m-%d").strftime("%y/%m/%d")

def parse_thai_date_to_iso(date_str: str) -> str:
    """
    ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ dd/mm/yyyy ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô yyyy-mm-dd (ISO)
    """
    return datetime.strptime(date_str, "%d/%m/%Y").strftime("%Y-%m-%d")


def login_required(view):
    @wraps(view)
    def wrapped(*args, **kwargs):
        if "user_id" not in session:
            flash("‡πÇ‡∏õ‡∏£‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô", "warning")
            return redirect(url_for("login"))
        return view(*args, **kwargs)
    return wrapped

def allowed_file(filename: str) -> bool:
    return "." in filename and filename.rsplit(".",1)[1].lower() in ALLOWED_EXTS

# -------------------- Database --------------------
def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS users(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE, password_hash TEXT, role TEXT)""")
        c.execute("""CREATE TABLE IF NOT EXISTS records(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            machine_no TEXT, name TEXT,
            date_text TEXT, date_iso TEXT,
            comments TEXT, damage TEXT,
            created_by TEXT, created_at_iso TEXT,
            file_path TEXT)""")
        conn.commit()
        if not c.execute("SELECT 1 FROM users").fetchone():
            c.execute("INSERT INTO users(username,password_hash,role) VALUES(?,?,?)",
                      ("admin", generate_password_hash("Admin@123"), "admin"))
            conn.commit()

# -------------------- CSS --------------------
THEME_CSS = """
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
body { 
  background: #f2f2f7; 
  font-family: -apple-system, BlinkMacSystemFont, "SF Pro Display", "Segoe UI", sans-serif;
}
.card, .table { 
  border-radius: 16px; 
  box-shadow: 0 4px 10px rgba(0,0,0,.05); 
  border: none; 
}
.btn { 
  border-radius: 12px; 
  font-weight: 500; 
}
h4, h5 { 
  color: #1c1c1e; 
  font-weight: 600; 
}
.navbar-custom { 
  backdrop-filter: blur(20px);
  background: rgba(255,255,255,0.8); 
  border-radius: 16px; 
  padding: 12px 20px; 
  box-shadow: 0 2px 8px rgba(0,0,0,.1);
}
.navbar-custom a { 
  color:#007aff !important; 
  font-weight:500; 
  margin-left:12px; 
  text-decoration:none; 
}
.table thead { 
  background:#e5e5ea; 
  color:#1c1c1e; 
  font-weight:600;
}
.form-control, .form-select { 
  border-radius: 10px; 
  height:32px;        /* üëà ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏•‡∏á */
  font-size:14px;     /* üëà ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ */
  padding: 2px 8px;   /* üëà ‡∏ö‡∏µ‡∏ö padding ‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô */
}

.search-box {
  border-radius: 12px;
  border: 1px solid #d1d1d6;
  padding: 8px 12px;
  width: 240px;
}
.container-narrow { max-width:700px; margin:auto; }
</style>
"""


# -------------------- Upload Serving --------------------
@app.route("/uploads/<path:filename>")
@login_required
def uploaded_file(filename):
    return send_from_directory(UPLOAD_DIR, filename)

# -------------------- Auth --------------------
@app.route("/login",methods=["GET","POST"])
def login():
    if request.method=="POST":
        u = request.form["username"].strip()
        p = request.form["password"]
        with sqlite3.connect(DB_NAME) as conn:
            c = conn.cursor()
            user = c.execute("SELECT id,username,password_hash,role FROM users WHERE username=?",(u,)).fetchone()
        if not user or not check_password_hash(user[2], p):
            flash("‚ùå Invalid credentials", "danger")
            return redirect(url_for("login"))
        session.update({"user_id":user[0], "username":user[1], "role":user[3]})
        return redirect(url_for("index"))
    return render_template_string(THEME_CSS + """
<div class="d-flex justify-content-center align-items-center vh-100">
  <div class="card shadow p-4 container-narrow">
    <h4 class="mb-3 text-center">üîê Login</h4>
    <form method="post" class="d-flex flex-column gap-2">
      <input name="username" class="form-control" placeholder="Username / ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" required>
      <input name="password" type="password" class="form-control" placeholder="Password / ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" required>
      <button class="btn btn-primary w-100">Login</button>
    </form>
  </div>
</div>
""")

@app.route("/logout")
@login_required
def logout():
    session.clear()
    return redirect(url_for("login"))

# -------------------- Change Password --------------------
@app.route("/change_password", methods=["GET","POST"])
@login_required
def change_password():
    if request.method == "POST":
        old_pw = request.form["old_password"]
        new_pw = request.form["new_password"]
        with sqlite3.connect(DB_NAME) as conn:
            c = conn.cursor()
            user = c.execute("SELECT id,password_hash FROM users WHERE id=?",(session["user_id"],)).fetchone()
            if not user or not check_password_hash(user[1], old_pw):
                flash("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "danger")
                return redirect(url_for("change_password"))
            c.execute("UPDATE users SET password_hash=? WHERE id=?", (generate_password_hash(new_pw), user[0]))
            conn.commit()
        flash("‚úÖ Password changed", "success")
        return redirect(url_for("index"))
    return render_template_string(THEME_CSS + """
<div class="container-narrow mt-3">
  <h4>üîë Change Password</h4>
  <form method="post" class="card p-3 shadow-sm d-flex flex-column gap-2">
    <input type="password" name="old_password" class="form-control" placeholder="Current Password / ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°" required>
    <input type="password" name="new_password" class="form-control" placeholder="New Password / ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" required>
    <button class="btn btn-primary">Update</button>
    <a href="{{url_for('index')}}" class="btn btn-secondary">Cancel</a>
  </form>
</div>
""")

# -------------------- Backup (Download DB) --------------------
@app.route("/backup_db")
@login_required
def backup_db():
    if session.get("role") != "admin":
        return "‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", 403
    filename = f"records_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    return send_file(DB_NAME, as_attachment=True, download_name=filename)

# -------------------- User Management --------------------
@app.route("/users", methods=["GET","POST"])
@login_required
def users():
    if session.get("role") != "admin":
        return "‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", 403
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        if request.method == "POST":
            username = request.form["username"].strip()
            password = request.form["password"]
            role     = request.form["role"]
            try:
                c.execute("INSERT INTO users(username,password_hash,role) VALUES (?,?,?)",
                          (username, generate_password_hash(password), role))
                conn.commit()
                flash("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß", "success")
            except sqlite3.IntegrityError:
                flash("‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", "danger")
        users = c.execute("SELECT id, username, role FROM users ORDER BY id DESC").fetchall()
    return render_template_string(THEME_CSS + """

<div class="container mt-3 container-narrow">
  <h4>üë• Users</h4>
{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{category}} mt-2">{{message}}</div>
    {% endfor %}
  {% endif %}
{% endwith %}

  <form method="post" class="d-flex flex-column gap-2 card card-body shadow-sm mb-3">
  <input name="username" class="form-control" placeholder="Username / ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" required>
  <input name="password" type="password" class="form-control" placeholder="Password / ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" required>
  <select name="role" class="form-select">
    <option value="user">user</option>
    <option value="admin">admin</option>
  </select>
  <button class="btn btn-primary">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</button>
<a href="{{url_for('index')}}" class="btn btn-secondary">üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
</form>

  <table class="table table-bordered table-hover shadow-sm align-middle">
    <thead class="table-dark"><tr><th>ID</th><th>Username</th><th>Role</th><th>Action</th></tr></thead>
    <tbody>
      {% for u in users %}
        <tr>
          <td>{{u[0]}}</td><td>{{u[1]}}</td><td>{{u[2]}}</td>
          <td>
            {% if u[1] != "admin" %}
              <a href="{{url_for('reset_password', user_id=u[0])}}" class="btn btn-sm btn-warning">Reset PW</a>
              <a href="{{url_for('delete_user', user_id=u[0])}}" onclick="return confirm('Delete user?')" class="btn btn-sm btn-danger">Delete</a>
            {% else %}<span class="text-muted">‚Äî</span>{% endif %}
          </td>
        </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
""", users=users)

# ---------- Edit Record ----------
@app.route("/edit/<int:record_id>", methods=["GET","POST"])
@login_required
def edit(record_id):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        r = c.execute("SELECT * FROM records WHERE id=?", (record_id,)).fetchone()
        if not r:
            return "Record not found", 404

        if request.method == "POST":
            machine_no = request.form["machine_no"].strip()
            name = request.form["name"].strip()
            date_iso = request.form["date_iso"]
            comments = request.form.get("comments","").strip()
            damage = request.form.get("damage","").strip()

            # ---------- ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ----------
            files = request.files.getlist("files")
            file_paths = r[9].split(";") if r[9] else []
            for file in files:
                if file and file.filename and allowed_file(file.filename):
                    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
                    file.seek(0, os.SEEK_END)
                    size = file.tell()
                    file.seek(0)
                    if size > MAX_FILE_SIZE:
                        flash(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå {file.filename} ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20MB", "danger")
                        return redirect(url_for("edit", record_id=record_id))

                    fname = secure_filename(file.filename)
                    save_path = os.path.join(UPLOAD_DIR, fname)
                    if os.path.exists(save_path):
                        base, ext = os.path.splitext(fname)
                        fname = f"{base}_{int(datetime.now().timestamp())}{ext}"
                        save_path = os.path.join(UPLOAD_DIR, fname)
                    file.save(save_path)
                    file_paths.append(fname)

            file_path_str = ";".join(file_paths) if file_paths else None

            date_th = request.form["date_iso"]  # ‡πÑ‡∏î‡πâ dd/mm/yyyy ‡∏à‡∏≤‡∏Å Flatpickr
            date_iso = parse_thai_date_to_iso(date_th)

            c.execute("""UPDATE records 
             SET machine_no=?, name=?, date_text=?, date_iso=?, comments=?, damage=?, file_path=?
             WHERE id=?""",
          (machine_no, name, parse_iso_to_text(date_iso), date_iso, comments, damage, file_path_str, record_id))
            conn.commit()
            flash("‚úÖ Updated", "success")
            return redirect(url_for("index"))

    # ---------- Template Edit ----------
    # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ template
    file_list = []
    if r[9]:
        for f in r[9].split(";"):
            path = os.path.join(UPLOAD_DIR, f)
            if os.path.exists(path):
                file_list.append(f)

    return render_template_string(THEME_CSS + """

<div class="container-narrow mt-3">
  <h4>‚úèÔ∏è Edit Record</h4>
  <form method="post" enctype="multipart/form-data" class="d-flex flex-column gap-2 card card-body shadow-sm">
    <input name="machine_no" class="form-control" value="{{r[1]}}" required>
    <input name="name" class="form-control" value="{{r[2]}}" required>
    <input type="text" name="date_iso" id="date_iso" class="form-control" value="{{r[4]}}" placeholder="dd/mm/yyyy" required>
    <input name="comments" class="form-control" value="{{r[5]}}">
    <input name="damage" class="form-control" value="{{r[6]}}">

    {% if file_list %}
      <label>üìé Attached Files</label><br>
      {% for f in file_list %}
        <a href="{{url_for('uploaded_file',filename=f)}}" target="_blank">{{f}}</a>
        <a href="{{url_for('delete_file', record_id=r[0], filename=f)}}"
           onclick="return confirm('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏°‡∏±‡πâ‡∏¢?')"
           class="btn btn-sm btn-danger ms-2">‡∏•‡∏ö</a><br>
      {% endfor %}
    {% endif %}

    <label class="mt-2">‚ûï Add More Files</label>
    <input type="file" name="files" class="form-control" multiple>

    <button class="btn btn-primary mt-2">üíæ Update</button>
    <a href="{{ url_for('index') }}" class="btn btn-secondary mt-2">‚¨Ö ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
    </form>
</div>

<!-- ‡πÇ‡∏´‡∏•‡∏î Flatpickr -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
  flatpickr("#date_iso", {
    dateFormat: "d/m/Y",
    defaultDate: "{{r[4]}}"
  });
</script>
""", r=r, file_list=file_list)


# ---------- Delete Record ----------
@app.route("/delete/<int:record_id>")
@login_required
def delete(record_id):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        # ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        rec = c.execute("SELECT file_path FROM records WHERE id=?", (record_id,)).fetchone()
        if rec and rec[0]:
            for f in rec[0].split(";"):
                path = os.path.join(UPLOAD_DIR, f)
                if os.path.exists(path):
                    os.remove(path)   # üîπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

        # ‡∏•‡∏ö record ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DB
        c.execute("DELETE FROM records WHERE id=?", (record_id,))
        conn.commit()

    flash("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "info")
    return redirect(url_for("index"))

@app.route("/delete_file/<int:record_id>/<filename>")
@login_required
def delete_file(record_id, filename):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        rec = c.execute("SELECT file_path FROM records WHERE id=?", (record_id,)).fetchone()
        if rec and rec[0]:
            files = rec[0].split(";")
            if filename in files:
                files.remove(filename)
                new_files = ";".join(files) if files else None
                c.execute("UPDATE records SET file_path=? WHERE id=?", (new_files, record_id))
                conn.commit()
                path = os.path.join(UPLOAD_DIR, filename)
                if os.path.exists(path):
                    os.remove(path)   # üîπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
                flash("‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß", "success")
    return redirect(url_for("edit", record_id=record_id))

@app.route("/delete_user/<int:user_id>")
@login_required
def delete_user(user_id):
    if session.get("role") != "admin":
        return "‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", 403
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        user = c.execute("SELECT username FROM users WHERE id=?", (user_id,)).fetchone()
        if user and user[0] == "admin":
            flash("‚ö†Ô∏è ‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö admin ‡∏´‡∏•‡∏±‡∏Å", "danger")
        else:
            c.execute("DELETE FROM users WHERE id=?", (user_id,))
            conn.commit()
            flash("üóëÔ∏è ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß", "info")
    return redirect(url_for("users"))

@app.route("/reset_password/<int:user_id>")
@login_required
def reset_password(user_id):
    if session.get("role") != "admin":
        return "‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", 403
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        user = c.execute("SELECT username FROM users WHERE id=?", (user_id,)).fetchone()
        if user and user[0] == "admin":
            flash("‚ö†Ô∏è ‡∏´‡πâ‡∏≤‡∏° reset ‡∏£‡∏´‡∏±‡∏™ admin ‡∏´‡∏•‡∏±‡∏Å", "danger")
        else:
            temp_pw = secrets.token_hex(4)   # ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏´‡∏±‡∏™ 8 ‡∏´‡∏•‡∏±‡∏Å
            c.execute("UPDATE users SET password_hash=? WHERE id=?",
                      (generate_password_hash(temp_pw), user_id))
            conn.commit()
            flash(f"üîÑ Reset password for {user[0]} ‚Üí {temp_pw}", "info")
    return redirect(url_for("users"))



# -------------------- Top Damaged --------------------
def get_top_damaged(search=None, start_date=None, end_date=None, damage_only=False, damage_filter=None, limit=10):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    sql = """SELECT machine_no, COUNT(*) as cnt
             FROM records
             WHERE 1=1 """
    params = []

    # filter: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if search:
        sql += " AND (machine_no LIKE ? OR name LIKE ? OR comments LIKE ? OR damage LIKE ?)"
        like = f"%{search}%"
        params += [like, like, like, like]

    # filter: ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if start_date:
        sql += " AND date_iso >= ?"
        params.append(start_date)
    if end_date:
        sql += " AND date_iso <= ?"
        params.append(end_date)

    # filter: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    if damage_only:
        sql += " AND damage IS NOT NULL AND damage <> ''"

    # filter: ‡∏à‡∏≤‡∏Å top issues
    if damage_filter:
        sql += " AND damage LIKE ?"
        params.append(f"%{damage_filter}%")

    sql += " GROUP BY machine_no ORDER BY cnt DESC LIMIT ?"
    params.append(limit)

    rows = c.execute(sql, params).fetchall()
    conn.close()
    return rows



#==================================================
#                       INDEX
# =================================================

@app.route("/", methods=["GET","POST"])
@login_required
def index():
    if request.method=="POST":
        files = request.files.getlist("files")
        file_paths = []
        for file in files:
            if file and file.filename and allowed_file(file.filename):
                file.seek(0, os.SEEK_END)
                size = file.tell()
                file.seek(0)
                if size > MAX_FILE_SIZE:
                    flash(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå {file.filename} ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20MB", "danger")
                    return redirect(url_for("index"))
                fname = secure_filename(file.filename)
                save_path = os.path.join(UPLOAD_DIR, fname)
                if os.path.exists(save_path):
                    base, ext = os.path.splitext(fname)
                    fname = f"{base}_{int(datetime.now().timestamp())}{ext}"
                    save_path = os.path.join(UPLOAD_DIR, fname)
                file.save(save_path)
                file_paths.append(fname)
        file_path_str = ";".join(file_paths) if file_paths else None
        with sqlite3.connect(DB_NAME) as conn:
            c = conn.cursor()
            c.execute("""INSERT INTO records(machine_no,name,date_text,date_iso,comments,damage,file_path,created_by,created_at_iso)
                         VALUES(?,?,?,?,?,?,?,?,?)""",
                    (request.form["machine_no"].strip(),
                     request.form["name"].strip(),
                     parse_iso_to_text(parse_thai_date_to_iso(request.form["date_iso"])),   # üëà ‡πÉ‡∏ä‡πâ format ‡πÑ‡∏ó‡∏¢ ‚Üí ISO ‚Üí text
                     parse_thai_date_to_iso(request.form["date_iso"]),                      # üëà ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô yyyy-mm-dd
                     request.form.get("comments","").strip(),
                     request.form.get("damage","").strip(),
                     file_path_str,
                     session["username"],
                     datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

            conn.commit()
        flash("‚úÖ Saved", "success")
        return redirect(url_for("index"))

    search = request.args.get("search")
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")
    damage_only = bool(request.args.get("damage_only"))
    page = int(request.args.get("page", 1))
    per_page = int(request.args.get("per_page", 20))   # üëà ‡∏Ñ‡πà‡∏≤ default = 20
    date_filter = request.args.get("date_iso")
    damage_filter = request.args.get("damage_word")
    recs, total = get_records(search, start_date, end_date, damage_only, page, per_page,
                          date_filter=date_filter, damage_filter=damage_filter)

    total_pages = (total + per_page - 1) // per_page  # ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏Ç‡∏∂‡πâ‡∏ô

    # ========== Chart: Top 10 damaged machines (‡∏ú‡∏π‡∏Å filter) ==========
    top_damaged = get_top_damaged(
        search=search,
        start_date=start_date,
        end_date=end_date,
        damage_only=damage_only,
        damage_filter=damage_filter,
        limit=10
    )
    labels = [r[0] for r in top_damaged]
    counts = [r[1] for r in top_damaged]

    # ========== Dashboard Queries ==========
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()

    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today = datetime.now().strftime("%Y-%m-%d")
    c.execute("SELECT COUNT(*) FROM records WHERE date_iso = ?", (today,))
    total_today = c.fetchone()[0]

    # % ‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    c.execute("SELECT COUNT(*) FROM records WHERE damage IS NOT NULL AND damage != ''")
    total_with_damage = c.fetchone()[0]

    c.execute("SELECT COUNT(*) FROM records")
    total_all = c.fetchone()[0]

    percent_damage = round((total_with_damage / total_all * 100), 1) if total_all else 0

    # Top 5 ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
    c.execute("SELECT damage FROM records WHERE damage IS NOT NULL AND damage != ''")
    damages = [row[0] for row in c.fetchall()]
    conn.close()

    from collections import Counter
    words = []
    for d in damages:
        words.extend(d.split())
    top_issues = Counter(words).most_common(5)

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    today_text = datetime.now().strftime("%d/%m/%Y")

    # ========== Trend (30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î) ‡∏û‡∏£‡πâ‡∏≠‡∏° filter ==========
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    sql = "SELECT date_iso, COUNT(*) FROM records WHERE 1=1"
    params = []

    if search:
        sql += " AND (machine_no LIKE ? OR name LIKE ? OR comments LIKE ? OR damage LIKE ?)"
        like = f"%{search}%"
        params += [like, like, like, like]

    if start_date:
        sql += " AND date_iso >= ?"
        params.append(start_date)
    else:
        sql += " AND date_iso >= date('now','-30 day')"  # default 30 ‡∏ß‡∏±‡∏ô

    if end_date:
        sql += " AND date_iso <= ?"
        params.append(end_date)

    if damage_only:
        sql += " AND damage IS NOT NULL AND damage <> ''"

    if damage_filter:
        sql += " AND damage LIKE ?"
        params.append(f"%{damage_filter}%")

    sql += " GROUP BY date_iso ORDER BY date_iso"
    c.execute(sql, params)
    trend_data = c.fetchall()
    conn.close()

    trend_labels = [row[0] for row in trend_data]
    trend_counts = [row[1] for row in trend_data]

    
    return render_template_string(THEME_CSS + """

<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <!-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î style.css -->
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">

  <!-- ‡∏ñ‡πâ‡∏≤‡∏û‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö THEME_CSS inline -->
  <style>
    {{ THEME_CSS|safe }}
  </style>
</head>

<body>
<div class="navbar-custom d-flex justify-content-between align-items-center mb-3">
  <div class="d-flex align-items-center">
    <img src="{{url_for('static', filename='logo.png')}}" height="50" class="me-2">
    <b style="color:white;">Vehicle Check</b>
  </div>
  
  <div class="container-narrow mb-3">
    <h3 class="text-center">‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
    <h5 class="text-center text-muted">Vehicle Pre-Use Check</h5>
  </div>
  
  
<div class="d-flex flex-column align-items-end">
  <div class="d-flex align-items-center gap-2">
    <!-- ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ö‡∏ô: Admin + Logout -->
    <span class="ms-2 text-dark">üë§ {{session['username']}} ({{session['role']}})</span>
    <a href="{{url_for('change_password')}}">Change Password</a>
    {% if session['role'] == 'admin' %}
    <div class="dropdown position-static">
      <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
        ‚öôÔ∏è Admin
      </a>
      <ul class="dropdown-menu dropdown-menu-end">
        <li><a class="dropdown-item" href="{{url_for('users')}}">üë• Users</a></li>
        <li><a class="dropdown-item" href="{{url_for('backup_db')}}">üì¶ Backup DB</a></li>
        <li><a class="dropdown-item" href="{{url_for('restore_db')}}">‚ôªÔ∏è Restore DB</a></li>
      </ul>
    </div>
    {% endif %}
    <a href="{{url_for('logout')}}">Logout</a>
  </div>

    <!-- Unified search & controls (basic + advanced) -->
    
  <form method="get" class="flex-grow-1">
    <div class="row g-2 align-items-center">
      <!-- Basic search -->
      <div class="col-auto">
        <input type="text" class="form-control form-control-sm"
               name="search" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
               value="{{ request.args.get('search','') }}">
      </div>

      <!-- Per page -->
      <div class="col-auto">
        <label for="per_page" class="me-2 small mb-0">‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤</label>
        <select name="per_page" id="per_page" class="form-select form-select-sm d-inline w-auto">
          <option value="10" {% if request.args.get('per_page','20') == '10' %}selected{% endif %}>10</option>
          <option value="20" {% if request.args.get('per_page','20') == '20' %}selected{% endif %}>20</option>
          <option value="50" {% if request.args.get('per_page','20') == '50' %}selected{% endif %}>50</option>
        </select>
      </div>

      <!-- Sort by -->
      <div class="col-auto">
        <label for="sort_by" class="me-2 small mb-0"></label>
        <select name="sort_by" id="sort_by" class="form-select form-select-sm d-inline w-auto">
          <option value="created" {% if sort_by=='created' %}selected{% endif %}>‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
          <option value="date" {% if sort_by=='date' %}selected{% endif %}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à</option>
          <option value="machine" {% if sort_by=='machine' %}selected{% endif %}>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ</option>
        </select>
      </div>

      <!-- Actions -->
      <div class="col-auto">
        <button type="submit" class="btn btn-primary btn-sm">Search</button>
        <a href="{{ url_for('index') }}" class="btn btn-secondary btn-sm">Clear</a>
      </div>

      

      <!-- Advanced content (moved up) -->
      <div class="col-12">
        <!-- ‡∏õ‡∏∏‡πà‡∏° Advanced -->
<button class="btn btn-outline-secondary btn-sm" type="button"
        data-bs-toggle="offcanvas" data-bs-target="#advFilters"
        aria-controls="advFilters">
  ‚öôÔ∏è Advanced
</button>

<!-- Advanced Filters Offcanvas -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="advFilters">
  <div class="offcanvas-header py-2">
    <h6 class="offcanvas-title">üîç Advanced Filters</h6>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
  </div>
  <div class="offcanvas-body p-2">
    <div class="mb-2">
      <input type="text" name="start_date" id="start_date"
             class="form-control form-control-sm"
             placeholder="‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
             value="{{ request.args.get('start_date','') }}">
    </div>
    <div class="mb-2">
      <input type="text" name="end_date" id="end_date"
             class="form-control form-control-sm"
             placeholder="‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
             value="{{ request.args.get('end_date','') }}">
    </div>
    <div class="form-check small">
      <input class="form-check-input" type="checkbox" name="damage_only" value="1"
             id="damageOnly" {% if request.args.get('damage_only') %}checked{% endif %}>
      <label class="form-check-label" for="damageOnly">
        ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
      </label>
    </div>
    <div class="d-flex justify-content-end gap-2 mt-2">
      <button type="submit" class="btn btn-primary btn-sm">Apply</button>
      <button type="button" class="btn btn-light btn-sm" data-bs-dismiss="offcanvas">Close</button>
    </div>
  </div>
</div>

                <!-- Dropdown ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÅ‡∏ó‡∏ô Quick buttons ‡πÄ‡∏î‡∏¥‡∏°) -->
<div class="col-12">
  <div class="dropdown">
    <button id="rangeDropdownBtn" class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏ä‡πà‡∏ß‡∏á‡∏î‡πà‡∏ß‡∏ô)
    </button>
    <ul class="dropdown-menu">
      <li class="dropdown-header">‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</li>
      <li><a class="dropdown-item" href="#" data-range="today">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</a></li>
      <li><a class="dropdown-item" href="#" data-range="yesterday">‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô</a></li>
      <li><a class="dropdown-item" href="#" data-range="this_month">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</a></li>

      <li><hr class="dropdown-divider"></li>

      <li class="dropdown-header">‡∏ä‡πà‡∏ß‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</li>
      <li><a class="dropdown-item" href="#" data-range="last_7">7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</a></li>
      <li><a class="dropdown-item" href="#" data-range="last_14">14 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</a></li>
      <li><a class="dropdown-item" href="#" data-range="last_28">28 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</a></li>
      <li><a class="dropdown-item" href="#" data-range="last_30">30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</a></li>

      <li><hr class="dropdown-divider"></li>

      <li class="dropdown-header">‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™/‡∏õ‡∏µ</li>
      <li class="dropend">
        <a class="dropdown-item dropdown-toggle" href="#" data-bs-toggle="dropdown">‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß</a>
        <ul class="dropdown-menu">
          <li><a class="dropdown-item" href="#" data-range="last_week_mon">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå</a></li>
          <li><a class="dropdown-item" href="#" data-range="last_week_sun">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå</a></li>
        </ul>
      </li>
      <li><a class="dropdown-item" href="#" data-range="last_month">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß</a></li>
      <li><a class="dropdown-item" href="#" data-range="last_quarter">‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß</a></li>
      <li><a class="dropdown-item" href="#" data-range="last_year">‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß</a></li>
    </ul>
  </div>

  <!-- ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á -->
  <div class="mt-1 small d-flex flex-wrap gap-1">
    {% if request.args.get('start_date') %}
      <span class="badge text-bg-light border">‡πÄ‡∏£‡∏¥‡πà‡∏°: {{ request.args.get('start_date') }}</span>
    {% endif %}
    {% if request.args.get('end_date') %}
      <span class="badge text-bg-light border">‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {{ request.args.get('end_date') }}</span>
    {% endif %}
    {% if request.args.get('search') %}
      <span class="badge text-bg-light border">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {{ request.args.get('search') }}</span>
    {% endif %}
    {% if request.args.get('damage_only') %}
      <span class="badge text-bg-light border">‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢</span>
    {% endif %}
  </div>
</div>
              </div>
            </div>
          </div>
        </div>
      </div>

    </div>
  </form>
</div>
</div>

<!-- Alert ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô record -->
<div class="d-flex justify-content-center mt-3">
  <div class="alert shadow-sm border-0 rounded-pill py-2 px-4 d-flex align-items-center"
       style="background: linear-gradient(90deg, #0d6efd 0%, #0dcaf0 100%); color: #fff; font-size: 1.1rem; font-weight: 600;">
    <i class="bi bi-search me-2"></i>
    ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î <span class="mx-1">{{ total }}</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  </div>
</div>

<!-- ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏á: Export -->
  <div class="d-flex justify-content-between align-items-center mt-2 flex-wrap gap-2">
  <!-- Export buttons (top only) -->
  <div class="btn-group">
    <a href="{{ url_for('export_excel', search=request.args.get('search'),
                                      start_date=request.args.get('start_date'),
                                      end_date=request.args.get('end_date'),
                                      damage_only=request.args.get('damage_only'),
                                      per_page=request.args.get('per_page','20'),
                                      sort_by=request.args.get('sort_by','created')) }}"
       class="btn btn-success btn-sm">üìä Excel</a>
    <a href="{{ url_for('export_csv', search=request.args.get('search'),
                                    start_date=request.args.get('start_date'),
                                    end_date=request.args.get('end_date'),
                                    damage_only=request.args.get('damage_only'),
                                    per_page=request.args.get('per_page','20'),
                                    sort_by=request.args.get('sort_by','created')) }}"
       class="btn btn-info btn-sm">üìÑ CSV</a>
    <a href="{{ url_for('export_pdf', search=request.args.get('search'),
                                    start_date=request.args.get('start_date'),
                                    end_date=request.args.get('end_date'),
                                    damage_only=request.args.get('damage_only'),
                                    per_page=request.args.get('per_page','20'),
                                    sort_by=request.args.get('sort_by','created')) }}"
       class="btn btn-danger btn-sm">üìë PDF</a>
  </div>


</div>

<!-- ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• --> 
<div class="row equal-height">
  <!-- Chart -->
  <div class="col-md-7 mb-3">
    <div class="card shadow-sm">
      <div class="card-body d-flex flex-column">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <h5 class="card-title">üìä Top 10 ‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</h5>
          <button id="toggleChart" type="button" class="btn btn-sm btn-outline-primary">‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü</button>
        </div>
        <div class="chart-container">
          <canvas id="damageChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  

    <!-- üîπ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ -->
    <div class="col-md-5">
    <div class="card shadow-sm h-100">
      <div class="card-body" style="padding:10px;">
          <h5 class="card-title text-center mb-3">üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h5>
          <form method="POST" enctype="multipart/form-data" class="row g-3">

        <!-- ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ -->
        <div class="col-12 col-md-4">
          <div class="input-group form-floating">
            <span class="input-group-text">
              <!-- Truck Mining Icon -->
              <svg xmlns="http://www.w3.org/2000/svg" 
                   width="28" height="28" viewBox="0 0 24 24" 
                   fill="none" stroke="gray" stroke-width="2" 
                   stroke-linecap="round" stroke-linejoin="round">
                <rect x="1" y="7" width="15" height="10" rx="2" ry="2"></rect>
                <path d="M16 10h4l3 4v3a2 2 0 0 1-2 2h-2"></path>
                <circle cx="5.5" cy="17.5" r="2.5"></circle>
                <circle cx="18.5" cy="17.5" r="2.5"></circle>
              </svg>
            </span>
            <input type="text" name="machine_no" class="form-control form-control-sm" id="machine_no"
                   placeholder="Machine No." required>
            <label for="machine_no">Machine No. / ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ</label>
          </div>
        </div>

        <!-- ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö -->
        <div class="col-12 col-md-4">
          <div class="input-group form-floating">
            <span class="input-group-text text-secondary">üë§</span>
            <input type="text" name="name" class="form-control form-control-sm" id="name"
                   placeholder="Name" required>
            <label for="name">Name / ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</label>
          </div>
        </div>

        <!-- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà -->
        <div class="col-12 col-md-4">
          <div class="input-group form-floating">
            <span class="input-group-text text-success">üìÖ</span>
            <input type="text" name="date_iso" id="date_iso" class="form-control form-control-sm"
                   placeholder="dd/mm/yyyy" required>
            <label for="date_iso">Date / ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
          </div>
        </div>

        <!-- Comments -->
        <div class="col-12 col-md-4">
          <div class="input-group form-floating">
            <span class="input-group-text text-info">üí¨</span>
            <input type="text" name="comments" class="form-control form-control-sm" id="comments"
                   placeholder="Comments">
            <label for="comments">Comments / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô</label>
          </div>
        </div>

        
        <!-- Damage -->
        <div class="col-12 col-md-4 d-flex align-items-center">
          <div class="input-group form-floating">
            <span class="input-group-text text-danger" style="font-size:1.8em;">‚ö†Ô∏è</span>
            <textarea name="damage" class="form-control form-control-sm" id="damage"
                   placeholder="List Damage"></textarea>
            <label for="damage">List Damage / ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢</label>
          </div>
        </div>

        <!-- ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå -->
        <div class="col-12">
          <div class="d-grid">
            <label for="files" class="btn btn-warning btn-sm w-100">
              üìé ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå
            </label>
            <input type="file" name="files" id="files" multiple class="d-none">
          </div>
        </div>

        <!-- ‡∏õ‡∏∏‡πà‡∏° -->
        <div class="col-12 d-flex gap-2">
          <button type="submit" class="btn btn-primary flex-fill">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
          <button type="reset" class="btn btn-secondary flex-fill">üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤</button>
        </div>


      </form>
    </div>
  </div>
</div>

<!-- ‡πÇ‡∏´‡∏•‡∏î Bootstrap Icons ‡∏Å‡πà‡∏≠‡∏ô (‡πÉ‡∏™‡πà‡πÉ‡∏ô <head>) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">




  <!-- üîπ Dashboard -->
  <div class="row mb-3 justify-content-center">
    <div class="col-md-4">
      <div class="card dashboard-card">
        <h6>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h6>
        <h3>{{ total_today }}</h3>
        <small class="text-muted">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {{ today_text }}</small>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card dashboard-card">
        <h6>% ‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤</h6>
        <h3>{{ percent_damage }}%</h3>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card dashboard-card">
        <h6>Top 5 ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢</h6>
          <ul class="list-unstyled mb-0">
           {% for issue,count in top_issues %}
            <li>
              <a href="?damage_word={{ issue }}" class="text-decoration-none">
                {{ issue }} ({{ count }})
              </a>
            </li>
            {% endfor %}
          </ul>
        </div>
    </div>
  </div>

  <!-- üîπ Trend 30 ‡∏ß‡∏±‡∏ô -->
  <div class="row mb-3">
    <div class="col-md-12">
      <div class="card dashboard-card">
        <h6>Trend ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h6>
        <canvas id="trendChart" height="100"></canvas>
      </div>
    </div>
  </div>



<!-- Advanced Filters moved to header toolbar -->
  </div>
</div>


<!-- Script Toggle -->
<script>
  const toggleBtn = document.getElementById('toggleAdvanced');
  const advancedFields = document.getElementById('advancedFields');

  advancedFields.addEventListener('shown.bs.collapse', () => {
    toggleBtn.innerHTML = '‚ûñ Hide Filters';
  });
  advancedFields.addEventListener('hidden.bs.collapse', () => {
    toggleBtn.innerHTML = '‚ûï Show Filters';
  });
</script>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const sortDropdowns = document.querySelectorAll("select[name='sort_by']");
  sortDropdowns.forEach(function(dd) {
    dd.addEventListener("change", function() {
      if (this.form) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ form ‚Üí submit ‡∏õ‡∏Å‡∏ï‡∏¥
        this.form.submit();
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å form ‚Üí redirect ‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏° query string
        const url = new URL(window.location.href);
        url.searchParams.set("sort_by", this.value);
        window.location.href = url.toString();
      }
    });
  });
});
</script>

       

  <!-- Sort by -->
      <div class="col-auto">
        <label for="sort_by" class="me-2 small mb-0">‡πÄ‡∏£‡∏µ‡∏¢‡∏á</label>
        <select name="sort_by" id="sort_by" class="form-select form-select-sm d-inline w-auto">
          <option value="created" {% if sort_by=='created' %}selected{% endif %}>‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
          <option value="date" {% if sort_by=='date' %}selected{% endif %}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à</option>
          <option value="machine" {% if sort_by=='machine' %}selected{% endif %}>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ</option>
        </select>
      </div>

      
  
</form>

      </form>

      <!-- duplicate export removed: now only at header -->

    </div>
  </div>
</div>

<!-- JS Toggle -->
<script>
function toggleAdvanced() {
  const adv = document.getElementById('advancedFields');
  const btn = document.getElementById('toggleBtn');
  const isOpen = adv.classList.toggle('show');  // ‡πÅ‡∏Ñ‡πà‡∏™‡∏•‡∏±‡∏ö show
  btn.textContent = isOpen ? 'Basic ‚ñ≤' : 'Advanced ‚ñº';
  if (isHidden) {
    adv.classList.remove("d-none");
    adv.classList.add("show");
    btn.textContent = "Basic ‚ñ≤";
  } else {
    adv.classList.remove("show");
    setTimeout(() => adv.classList.add("d-none"), 300); // ‡∏£‡∏≠ animation ‡∏à‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡∏ã‡πà‡∏≠‡∏ô
    btn.textContent = "Advanced ‚ñº";
  }
}
</script>

<table class="table table-bordered table-hover shadow-sm align-middle">
  <thead class="table-dark text-center">
    <tr><th>Machine No.</th><th>Name</th><th>Date</th><th>Comments</th>
    <th>List Damage</th><th>File</th><th>Created By</th><th>Created At</th><th>Action</th></tr>
  </thead>
  <tbody>
    {% for r in recs %}
    <tr>
      <td>{{r[1]}}</td><td>{{r[2]}}</td><td>{{r[3]}}</td><td>{{ r[5] or "‚Äî" }}</td><td>{{r[6] or "-"}}</td>
      <td class="text-center">
  {% if r[9] %}
    {% set files = r[9].split(';') %}
    <a href="#" data-bs-toggle="modal" data-bs-target="#filesModal{{r[0]}}">
      üìé {{ files|length }}
    </a>

    <!-- Modal -->
    <div class="modal fade" id="filesModal{{r[0]}}" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">üìé Files for Record #{{r[0]}}</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <ul class="list-group">
              {% for f in files %}
              <li class="list-group-item">
                <a href="{{ url_for('uploaded_file', filename=f) }}" target="_blank">{{ f }}</a>
              </li>
              {% endfor %}
            </ul>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      </div>
    </div>
  {% endif %}
</td>

      <td>{{r[7]}}</td><td>{{r[8]}}</td>
      <td>
          {% if session['role'] == 'admin' %}
            <a href="{{url_for('edit',record_id=r[0])}}" class="btn btn-sm btn-warning">Edit</a>
            <a href="{{url_for('delete',record_id=r[0])}}" onclick="return confirm('Delete?')" class="btn btn-sm btn-danger">Delete</a>
          {% else %}
            <span class="text-muted">View Only</span>
          {% endif %}
    </td>

    </tr>
    {% endfor %}
  </tbody>
</table>

<!-- ‚úÖ Pagination -->
<nav>
  <ul class="pagination justify-content-center">
    <!-- Previous -->
    <li class="page-item {% if page <= 1 %}disabled{% endif %}">
      <a class="page-link"
         href="{{ url_for('index',
               page=page-1,
               per_page=request.args.get('per_page','20'),
               search=request.args.get('search'),
               start_date=request.args.get('start_date'),
               end_date=request.args.get('end_date'),
               damage_only=request.args.get('damage_only')) }}">
         Previous
      </a>
    </li>

    <!-- Numbered pages -->
    {% for p in range(1, total_pages+1) %}
      <li class="page-item {% if p == page %}active{% endif %}">
        <a class="page-link"
           href="{{ url_for('index',
                 page=p,
                 per_page=request.args.get('per_page','20'),
                 search=request.args.get('search'),
                 start_date=request.args.get('start_date'),
                 end_date=request.args.get('end_date'),
                 damage_only=request.args.get('damage_only')) }}">
           {{p}}
        </a>
      </li>
    {% endfor %}

    <!-- Next -->
    <li class="page-item {% if page >= total_pages %}disabled{% endif %}">
      <a class="page-link"
         href="{{ url_for('index',
               page=page+1,
               per_page=request.args.get('per_page','20'),
               search=request.args.get('search'),
               start_date=request.args.get('start_date'),
               end_date=request.args.get('end_date'),
               damage_only=request.args.get('damage_only')) }}">
         Next
      </a>
    </li>
  </ul>
</nav>

<!-- ‡πÇ‡∏´‡∏•‡∏î Flatpickr -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
  flatpickr("#date_iso", {
    dateFormat: "d/m/Y",   // ‡πÅ‡∏™‡∏î‡∏á dd/mm/yyyy
    defaultDate: new Date()
  });
</script>

<!-- ‡πÇ‡∏´‡∏•‡∏î Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- ‡πÇ‡∏´‡∏•‡∏î Plugin datalabels -->
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

<script>
  const ctx = document.getElementById('damageChart').getContext('2d');
  let currentType = 'bar';

  // ‚úÖ Data
  const chartData = {
    labels: {{ labels|tojson }},
    datasets: [{
      label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
      data: {{ counts|tojson }},
      backgroundColor: [
        '#dc3545', '#fd7e14', '#ffc107', '#198754', '#0d6efd',
        '#6610f2', '#6f42c1', '#20c997', '#0dcaf0', '#adb5bd'
      ]
    }]
  };

  // ‚úÖ Options
  const makeOptions = (type) => {
    return {
      responsive: true,
      maintainAspectRatio: false,
      layout: {
        padding: { top: type === 'bar' ? 30 : 10 }   // bar ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡∏ß‡πà‡∏≤ pie
      },
      plugins: {
        legend: { display: true, position: type === 'pie' ? 'right' : 'top' },
        datalabels: {
          anchor: type === 'bar' ? 'end' : 'center',
          align: type === 'bar' ? 'end' : 'center',
          offset: type === 'bar' ? -4 : 0,
          color: type === 'bar' ? '#000' : '#fff',
          font: { weight: 'bold' },
          formatter: (value, ctx) => {
            const sum = ctx.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
            const percentage = ((value / sum) * 100).toFixed(1);
            return type === 'bar'
              ? `${value} (${percentage}%)`   // ‚úÖ Bar = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô + %
              : `${value} (${percentage}%)`; // ‚úÖ Pie = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô + %
          }
        }
        ,
        tooltip: {
          callbacks: {
            label: function(context) {
              const value = context.raw;
              const sum = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
              const percentage = ((value / sum) * 100).toFixed(1);
              return `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${value} | ${percentage}%`;
            }
          }
        }
      },
      scales: type === 'bar' ? {
        x: { title: { display: true, text: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ' }},
        y: { title: { display: true, text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤' }, beginAtZero: true }
      } : {}
    };
  };

  // ‚úÖ Initial chart
  let myChart = new Chart(ctx, {
    type: currentType,
    data: chartData,
    options: makeOptions(currentType),
    plugins: [ChartDataLabels]
  });

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° toggle bar/pie
  document.getElementById('toggleChart').addEventListener('click', function() {
    myChart.destroy();
    currentType = (currentType === 'bar') ? 'pie' : 'bar';
    myChart = new Chart(ctx, {
      type: currentType,
      data: chartData,
      options: makeOptions(currentType),
      plugins: [ChartDataLabels]
    });
  });
</script>

<!-- Bootstrap JS + Popper -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"></script>

<!-- ‚úÖ Auto-expand textarea -->
<script>
  const damageBox = document.getElementById("damage");
  if (damageBox) {
    damageBox.addEventListener("input", function() {
      this.style.height = "auto";
      this.style.height = this.scrollHeight + "px"; // ‡∏¢‡∏∑‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    });
  }
</script>
 
<script>
const trendCtx = document.getElementById("trendChart").getContext("2d");
const trendChart = new Chart(trendCtx, {
  type: "line",
  data: {
    labels: {{ trend_labels|tojson }},
    datasets: [{
      label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
      data: {{ trend_counts|tojson }},
      borderColor: "#0d6efd",
      backgroundColor: "rgba(13,110,253,0.2)",
      tension: 0.3,
      fill: true,
      pointBackgroundColor: "#0d6efd",
      pointRadius: 8,
      pointHoverRadius: 12,
      hitRadius: 20
    }]
  },
  options: {
    responsive: true,
    plugins: {
      legend: { display: false },
      tooltip: { mode: "index", intersect: false }
    },
    interaction: { mode: 'nearest', axis: 'x', intersect: false },
    scales: {
      x: { title: { display: true, text: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" }},
      y: { title: { display: true, text: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤" }, beginAtZero: true }
    }
  }
});

// ‚úÖ Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
document.getElementById("trendChart").onclick = function(evt) {
  const points = trendChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);
  if (points.length > 0) {
    const firstPoint = points[0];
    const label = trendChart.data.labels[firstPoint.index];
    window.location.href = `?date_iso=${label}`;
  }
};
</script>



<script>
(function(){
  // ----- Helpers -----
  const toISO = d => new Date(d.getTime() - d.getTimezoneOffset()*60000).toISOString().split('T')[0];

  function startOfWeek(date, weekStart='mon'){
    const d = new Date(date); d.setHours(0,0,0,0);
    const day = d.getDay(); // 0=Sun..6=Sat
    let diff;
    if (weekStart === 'mon') diff = (day === 0 ? -6 : 1) - day; // Monday
    else diff = 0 - day; // Sunday
    d.setDate(d.getDate() + diff);
    return d;
  }
  const startOfMonth = (date)=> new Date(date.getFullYear(), date.getMonth(), 1);
  const endOfMonth   = (date)=> new Date(date.getFullYear(), date.getMonth()+1, 0);
  function startOfQuarter(date){
    const m = date.getMonth();
    const qStartMonth = m - (m % 3);
    return new Date(date.getFullYear(), qStartMonth, 1);
  }
  function endOfQuarter(date){
    const s = startOfQuarter(date);
    return new Date(s.getFullYear(), s.getMonth()+3, 0);
  }
  const startOfYear = (date)=> new Date(date.getFullYear(), 0, 1);
  const endOfYear   = (date)=> new Date(date.getFullYear(), 11, 31);

  function lastNDays(n){
    const today = new Date(); today.setHours(0,0,0,0);
    const start = new Date(today); start.setDate(today.getDate() - (n-1));
    return {start, end: today};
  }

  // ----- Core mapping -----
  function getRange(key){
    const today = new Date(); today.setHours(0,0,0,0);
    const y = new Date(today); y.setDate(today.getDate()-1);

    if (key === 'today')        return { start: today, end: today };
    if (key === 'yesterday')    return { start: y,     end: y };
    if (key === 'this_month')   return { start: startOfMonth(today), end: endOfMonth(today) };

    if (key === 'last_7')       return lastNDays(7);
    if (key === 'last_14')      return lastNDays(14);
    if (key === 'last_28')      return lastNDays(28);
    if (key === 'last_30')      return lastNDays(30);

    if (key === 'last_week_mon'){
      const thisMon = startOfWeek(today,'mon');
      const lastMon = new Date(thisMon); lastMon.setDate(thisMon.getDate()-7);
      const lastSun = new Date(lastMon); lastSun.setDate(lastMon.getDate()+6);
      return { start: lastMon, end: lastSun };
    }
    if (key === 'last_week_sun'){
      const thisSun = startOfWeek(today,'sun');
      const lastSun = new Date(thisSun); lastSun.setDate(thisSun.getDate()-7);
      const lastSat = new Date(lastSun); lastSat.setDate(lastSun.getDate()+6);
      return { start: lastSun, end: lastSat };
    }

    if (key === 'last_month'){
      const firstThis = startOfMonth(today);
      const lastPrev  = new Date(firstThis); lastPrev.setDate(0);
      const firstPrev = startOfMonth(lastPrev);
      return { start: firstPrev, end: lastPrev };
    }

    if (key === 'last_quarter'){
      const thisQStart = startOfQuarter(today);
      const prevQDay = new Date(thisQStart); prevQDay.setDate(thisQStart.getDate()-1);
      return { start: startOfQuarter(prevQDay), end: endOfQuarter(prevQDay) };
    }

    if (key === 'last_year'){
      const prevYearDate = new Date(today.getFullYear()-1, today.getMonth(), today.getDate());
      return { start: startOfYear(prevYearDate), end: endOfYear(prevYearDate) };
    }

    // fallback
    return lastNDays(30);
  }

  function applyRange(key){
    const {start, end} = getRange(key);
    const url = new URL(window.location.href);
    url.searchParams.set('start_date', toISO(start));
    url.searchParams.set('end_date',   toISO(end));
    url.searchParams.delete('page'); // reset pagination
    window.location.href = url.toString();
  }

  // ----- Bind click events -----
  document.querySelectorAll('[data-range]').forEach(el=>{
    el.addEventListener('click', (e)=>{
      e.preventDefault();
      applyRange(el.getAttribute('data-range'));
    });
  });

  // ----- Decorate button label & active item (best-effort) -----
  const url = new URL(window.location.href);
  const s = url.searchParams.get('start_date');
  const e = url.searchParams.get('end_date');
  const btn = document.getElementById('rangeDropdownBtn');

  function formatRangeLabel(s, e){
    if (!s || !e) return '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏ä‡πà‡∏ß‡∏á‡∏î‡πà‡∏ß‡∏ô)';
    if (s === e) return `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${s}`;
    return `${s} ‚Üí ${e}`;
  }
  if (btn) btn.textContent = formatRangeLabel(s, e);

  function markActive(){
    const items = document.querySelectorAll('.dropdown-menu [data-range]');
    items.forEach(i => i.classList.remove('active'));
    if (!s || !e) return;

    // ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö key ‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï
    const today = new Date(); today.setHours(0,0,0,0);
    const iso = d => toISO(d);

    function lastNDaysISO(n){
      const start = new Date(today); start.setDate(today.getDate()-(n-1));
      return {S: iso(start), E: iso(today)};
    }
    const candidates = [
      ['today',       {S: iso(today), E: iso(today)}],
      ['yesterday',   (()=>{const y=new Date(today); y.setDate(today.getDate()-1); return {S: iso(y), E: iso(y)};})()],
      ['this_month',  {S: `${today.getFullYear()}-${String(today.getMonth()+1).padStart(2,'0')}-01`, 
                       E: iso(new Date(today.getFullYear(), today.getMonth()+1, 0))}],
      ['last_7',      lastNDaysISO(7)],
      ['last_14',     lastNDaysISO(14)],
      ['last_28',     lastNDaysISO(28)],
      ['last_30',     lastNDaysISO(30)],
    ];
    for (const [key, rng] of candidates){
      if (rng.S === s && rng.E === e){
        const el = document.querySelector(`[data-range="${key}"]`);
        if (el) el.classList.add('active');
        break;
      }
    }
  }
  markActive();
})();
</script>




</body>


</html>


</div>
""",recs=recs,
    total=total,                          
    page=page,
    total_pages=total_pages,
    labels=labels,
    counts=counts,
    total_today=total_today,
    percent_damage=percent_damage,
    top_issues=top_issues,
    today_text=today_text,   # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
    trend_labels=trend_labels,
    trend_counts=trend_counts                               
                              
)

# -------------------- search --------------------
def get_records(search=None, start_date=None, end_date=None,
                damage_only=False, page=1, per_page=20,
                date_filter=None, damage_filter=None):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()

    sql = "SELECT * FROM records WHERE 1=1"
    params = []

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if search:
        sql += " AND (machine_no LIKE ? OR name LIKE ? OR comments LIKE ? OR damage LIKE ?)"
        like = f"%{search}%"
        params += [like, like, like, like]

    # ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if start_date:
        sql += " AND date_iso >= ?"
        params.append(start_date)
    if end_date:
        sql += " AND date_iso <= ?"
        params.append(end_date)

    # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    if damage_only:
        sql += " AND damage IS NOT NULL AND damage != ''"

    # ‚úÖ filter ‡∏à‡∏≤‡∏Å Trend Chart
    if date_filter:
        sql += " AND date_iso = ?"
        params.append(date_filter)

    # ‚úÖ filter ‡∏à‡∏≤‡∏Å Top 5 ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    if damage_filter:
        sql += " AND damage LIKE ?"
        params.append(f"%{damage_filter}%")

    # ‡∏ô‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    c.execute(sql, params)
    total = len(c.fetchall())

    sort_by = request.args.get("sort_by", "created")

    # ‚úÖ Order by ‡∏Å‡πà‡∏≠‡∏ô
    if sort_by == "created":
        sql += " ORDER BY created_at_iso DESC"
    elif sort_by == "date":
        sql += " ORDER BY date_iso DESC"
    elif sort_by == "machine":
        sql += " ORDER BY machine_no ASC"
    else:
        sql += " ORDER BY created_at_iso DESC"  # fallback

    # ‚úÖ Limit/Offset ‡∏ï‡∏≤‡∏° pagination
    sql += " LIMIT ? OFFSET ?"
    params += [per_page, (page - 1) * per_page]

    c.execute(sql, params)
    recs = c.fetchall()
    conn.close()
    return recs, total




# -------------------- Export --------------------
# =========================
# Export Excel
# =========================

@app.route("/export/excel")
@login_required
def export_excel():
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ filter ‡∏à‡∏≤‡∏Å query string
    search = request.args.get("search")
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")
    damage_only = bool(request.args.get("damage_only"))
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ filter ‡πÉ‡∏ä‡πâ filter ‡∏ô‡∏±‡πâ‡∏ô ‚Üí ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    recs, _ = get_records(search, start_date, end_date, damage_only, 1, 99999)

    df = pd.DataFrame(recs, columns=[
        "ID","‡∏£‡∏ñ","‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà","Date ISO","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","‡∏ä‡∏≥‡∏£‡∏∏‡∏î","‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å","‡πÄ‡∏ß‡∏•‡∏≤","‡πÑ‡∏ü‡∏•‡πå"
    ])
    df = df.drop(columns=["Date ISO","‡πÑ‡∏ü‡∏•‡πå"])
    fp = os.path.join(BASE_DIR,"records.xlsx")
    df.to_excel(fp, index=False)
    return send_file(fp, as_attachment=True)


# =========================
# Export CSV
# =========================
@app.route("/export/csv")
@login_required
def export_csv():
    search = request.args.get("search")
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")
    damage_only = bool(request.args.get("damage_only"))

    recs, _ = get_records(search, start_date, end_date, damage_only, 1, 99999)

    df = pd.DataFrame(recs, columns=[
        "ID","‡∏£‡∏ñ","‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà","Date ISO","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","‡∏ä‡∏≥‡∏£‡∏∏‡∏î","‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å","‡πÄ‡∏ß‡∏•‡∏≤","‡πÑ‡∏ü‡∏•‡πå"
    ])
    df = df.drop(columns=["‡πÑ‡∏ü‡∏•‡πå","Date ISO"])
    fp = os.path.join(BASE_DIR,"records.csv")
    df.to_csv(fp, index=False, encoding="utf-8-sig")
    return send_file(fp, as_attachment=True)

# =========================
# Export PDF
# =========================
@app.route("/export/pdf")
@login_required
def export_pdf():
    search = request.args.get("search")
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")
    damage_only = bool(request.args.get("damage_only"))

    recs, _ = get_records(search, start_date, end_date, damage_only, 1, 99999)

    fp = os.path.join(BASE_DIR,"records.pdf")

     # ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢
    font_path = os.path.join("static","fonts","THSarabunNew.ttf")
    pdfmetrics.registerFont(TTFont("THSarabunNew", font_path))

    doc = SimpleDocTemplate(fp, pagesize=A4,
                            rightMargin=30,leftMargin=30,
                            topMargin=40,bottomMargin=30)

    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='ThaiNormal', fontName='THSarabunNew', fontSize=12, leading=14))
    styles.add(ParagraphStyle(name='ThaiHeader', fontName='THSarabunNew', fontSize=16, alignment=1, spaceAfter=10))

    elements = []

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
    user = session.get("username", "Unknown")

    # ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    from reportlab.platypus import Image
    logo_path = os.path.join("static","logo.png")
    if os.path.exists(logo_path):
        elements.append(Image(logo_path, width=250, height=60))
    elements.append(Paragraph("<b>‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</b>", styles['ThaiHeader']))
    elements.append(Paragraph("Vehicle Pre-Use Check", styles['ThaiHeader']))
    elements.append(Paragraph("‡πÇ‡∏•‡∏ï‡∏±‡∏™‡∏Æ‡∏≠‡∏•‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á‡πÅ‡∏£‡πà‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î", styles['ThaiNormal']))
    elements.append(Paragraph("LotusHall Mining : Heavy Engineering Construction Co., Ltd.", styles['ThaiNormal']))
    elements.append(Paragraph(
    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô : " + datetime.now().strftime("%d/%m/%Y") + f" (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user})",
    styles['ThaiNormal']
))

    elements.append(Spacer(1, 12))

    # ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ï‡∏±‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö" ‡∏≠‡∏≠‡∏Å)
    headers = ["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ","‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà","‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô",
               "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢","‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å","‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"]
    data = [[Paragraph(h, styles['ThaiNormal']) for h in headers]]

    for r in recs:
        row = [
            Paragraph(str(r[1] or "-"), styles['ThaiNormal']),  # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ
            Paragraph(str(r[2] or "-"), styles['ThaiNormal']),  # ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            Paragraph(str(r[3] or "-"), styles['ThaiNormal']),  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            Paragraph(str(r[5] or "-"), styles['ThaiNormal']),  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
            Paragraph(str(r[6] or "-"), styles['ThaiNormal']),  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
            Paragraph(str(r[7] or "-"), styles['ThaiNormal']),  # ‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            Paragraph(str(r[8] or "-"), styles['ThaiNormal']),  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        ]
        data.append(row)

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà (7 ‡∏ä‡πà‡∏≠‡∏á)
    col_widths = [70,70,60,100,100,80,80]
    table = Table(data, repeatRows=1, colWidths=col_widths)
    table.setStyle(TableStyle([
        ('BACKGROUND',(0,0),(-1,0), colors.HexColor("#0d47a1")),
        ('TEXTCOLOR',(0,0),(-1,0), colors.white),
        ('FONTNAME',(0,0),(-1,-1),'THSarabunNew'),
        ('FONTSIZE',(0,0),(-1,-1),12),
        ('GRID',(0,0),(-1,-1),0.25, colors.grey),
        ('VALIGN',(0,0),(-1,-1),'MIDDLE'),
        ('ROWBACKGROUNDS',(0,1),(-1,-1),[colors.whitesmoke, colors.lightgrey])
    ]))
    elements.append(table)
    elements.append(Spacer(1, 30))

    # ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    elements.append(Paragraph("‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö .................................................", styles['ThaiNormal']))
    elements.append(Spacer(1, 20))
    elements.append(Paragraph("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ............................................................", styles['ThaiNormal']))

    doc.build(elements, canvasmaker=NumberedCanvas)

    
    return send_file(fp, as_attachment=True)

    #RESTORE DATABASE

@app.route("/restore_db", methods=["GET","POST"])
@login_required
def restore_db():
    if session.get("role") != "admin":
        return "‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", 403

    if request.method == "POST":
        file = request.files.get("dbfile")
        if file and file.filename.endswith(".db"):
            # üîπ ‡∏™‡∏≥‡∏£‡∏≠‡∏á DB ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
            backup_path = DB_NAME + ".bak"
            if os.path.exists(DB_NAME):
                os.replace(DB_NAME, backup_path)

            # üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ö DB ‡πÄ‡∏î‡∏¥‡∏°
            save_path = DB_NAME
            file.save(save_path)

            flash("‚úÖ Restore DB ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô .bak)", "success")
            return redirect(url_for("index"))
        else:
            flash("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .db ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", "danger")
            return redirect(url_for("restore_db"))

    return render_template_string(THEME_CSS + """

    <div class="container-narrow mt-3">
      <h4>üóÇÔ∏è Restore Database</h4>
      <form method="post" enctype="multipart/form-data" class="card card-body shadow-sm">
        <label for="dbfile">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå .db ‡πÄ‡∏û‡∏∑‡πà‡∏≠ restore:</label>
        <input type="file" name="dbfile" id="dbfile" accept=".db" class="form-control" required>
        <button class="btn btn-danger mt-3">‚ôªÔ∏è Restore</button>
        <a href="{{url_for('index')}}" class="btn btn-secondary mt-2">‚¨Ö ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
      </form>
    </div>
    """)


# -------------------- Run --------------------
if __name__=="__main__":
    init_db()
    app.run(debug=True)
